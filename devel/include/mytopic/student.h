// Generated by gencpp from file mytopic/student.msg
// DO NOT EDIT!


#ifndef MYTOPIC_MESSAGE_STUDENT_H
#define MYTOPIC_MESSAGE_STUDENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mytopic
{
template <class ContainerAllocator>
struct student_
{
  typedef student_<ContainerAllocator> Type;

  student_()
    : name()
    , number()
    , course()
    , score(0.0)  {
    }
  student_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , number(_alloc)
    , course(_alloc)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _number_type;
  _number_type number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _course_type;
  _course_type course;

   typedef float _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::mytopic::student_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mytopic::student_<ContainerAllocator> const> ConstPtr;

}; // struct student_

typedef ::mytopic::student_<std::allocator<void> > student;

typedef boost::shared_ptr< ::mytopic::student > studentPtr;
typedef boost::shared_ptr< ::mytopic::student const> studentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mytopic::student_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mytopic::student_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mytopic::student_<ContainerAllocator1> & lhs, const ::mytopic::student_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.number == rhs.number &&
    lhs.course == rhs.course &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mytopic::student_<ContainerAllocator1> & lhs, const ::mytopic::student_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mytopic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mytopic::student_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mytopic::student_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mytopic::student_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mytopic::student_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mytopic::student_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mytopic::student_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mytopic::student_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31f181a25cf11cee4124a8e13864eb04";
  }

  static const char* value(const ::mytopic::student_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31f181a25cf11ceeULL;
  static const uint64_t static_value2 = 0x4124a8e13864eb04ULL;
};

template<class ContainerAllocator>
struct DataType< ::mytopic::student_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mytopic/student";
  }

  static const char* value(const ::mytopic::student_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mytopic::student_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string number\n"
"string course\n"
"float32 score\n"
;
  }

  static const char* value(const ::mytopic::student_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mytopic::student_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.number);
      stream.next(m.course);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct student_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mytopic::student_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mytopic::student_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.number);
    s << indent << "course: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.course);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYTOPIC_MESSAGE_STUDENT_H
